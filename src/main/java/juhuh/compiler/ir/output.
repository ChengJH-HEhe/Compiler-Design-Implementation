@.str.true = private unnamed_addr constant [5 x i8] c"true\00"
@.str.false = private unnamed_addr constant [6 x i8] c"false\00"
@n.0.0 = global i32 0
@h.0.0 = global i32 0
@now.0.0 = global i32 0
@a.0.0 = global ptr null
@A.0.0 = global i32 0
@M.0.0 = global i32 0
@Q.0.0 = global i32 0
@R.0.0 = global i32 0
@seed.0.0 = global i32 0
@.str.0 = private unnamed_addr constant [2 x i8] c" \00"
@.str.1 = private unnamed_addr constant [1 x i8] c"\00"
@.str.2 = private unnamed_addr constant [80 x i8] c"Sorry, the number n must be a number s.t. there exists i satisfying n=1+2+...+i\00"
@.str.3 = private unnamed_addr constant [13 x i8] c"Let's start!\00"
@.str.4 = private unnamed_addr constant [6 x i8] c"step \00"
@.str.5 = private unnamed_addr constant [2 x i8] c":\00"
@.str.6 = private unnamed_addr constant [8 x i8] c"Total: \00"
@.str.7 = private unnamed_addr constant [9 x i8] c" step(s)\00"
%class.string = type {  }
declare i32 @length(ptr %this)
declare ptr @substring(ptr %this, i32 %.int0, i32 %.int1)
declare i32 @parseInt(ptr %this)
declare i32 @ord(ptr %this, i32 %.int0)
declare i32 @_arr_size(ptr %array)
declare ptr @_malloc(i32 %size)
declare ptr @_arr_init(i32 %size)
declare ptr @_add(ptr %str1, ptr %str2)
declare i32 @_strcmp(ptr %str1, ptr %str2)
declare ptr @toString(i32 %i)
declare void @print(ptr %str)
declare void @println(ptr %str)
declare void @printInt(i32 %i)
declare void @printlnInt(i32 %i)
declare ptr @getString()
declare i32 @getInt()
define i32 @random() {
entry:
  %ret.val= alloca i32
  %tempseed.1.0= alloca i32
  %0 = load i32, ptr @A.0.0
  %1 = load i32, ptr @seed.0.0
  %2 = load i32, ptr @Q.0.0
  %3 = srem i32 %1, %2
  %4 = mul i32 %0, %3
  %5 = load i32, ptr @R.0.0
  %6 = load i32, ptr @seed.0.0
  %7 = load i32, ptr @Q.0.0
  %8 = sdiv i32 %6, %7
  %9 = mul i32 %5, %8
  %10 = sub i32 %4, %9
  store i32 %10, ptr %tempseed.1.0
  %11 = load i32, ptr %tempseed.1.0
  %12 = icmp sge i32 %11, 0
  br i1 %12, label %if.then2.0.0, label %if.else2.0.0

if.then2.0.0:
  %13 = load i32, ptr %tempseed.1.0
  %14 = load i32, ptr @seed.0.0
  store i32 %13, ptr @seed.0.0
  br label %if.end2.0.0

if.else2.0.0:
  %15 = load i32, ptr %tempseed.1.0
  %16 = load i32, ptr @M.0.0
  %17 = add i32 %15, %16
  %18 = load i32, ptr @seed.0.0
  store i32 %17, ptr @seed.0.0
  br label %if.end2.0.0

if.end2.0.0:
  %19 = load i32, ptr @seed.0.0
  store i32 %19, ptr %ret.val
  br label %return


return:
  %20 = load i32, ptr %ret.val
  ret i32 %20

}

define void @initialize(i32 %val) {
entry:
  %val.1.1= alloca i32
  store i32 %val, ptr %val.1.1
  %0 = load i32, ptr %val.1.1
  %1 = load i32, ptr @seed.0.0
  store i32 %0, ptr @seed.0.0
  br label %return


return:
  ret void

}

define void @swap(i32 %x, i32 %y) {
entry:
  %x.1.2= alloca i32
  store i32 %x, ptr %x.1.2
  %y.1.2= alloca i32
  store i32 %y, ptr %y.1.2
  %temp.1.2= alloca i32
  %0 = load ptr, ptr @a.0.0
  %1 = load i32, ptr %x.1.2
  %2 = getelementptr i32, ptr %0, i32 %1
  %3 = load i32, ptr %2
  store i32 %3, ptr %temp.1.2
  %4 = load ptr, ptr @a.0.0
  %5 = load i32, ptr %y.1.2
  %6 = getelementptr i32, ptr %4, i32 %5
  %7 = load i32, ptr %6
  %8 = load ptr, ptr @a.0.0
  %9 = load i32, ptr %x.1.2
  %10 = getelementptr i32, ptr %8, i32 %9
  %11 = load i32, ptr %10
  store i32 %7, ptr %10
  %12 = load i32, ptr %temp.1.2
  %13 = load ptr, ptr @a.0.0
  %14 = load i32, ptr %y.1.2
  %15 = getelementptr i32, ptr %13, i32 %14
  %16 = load i32, ptr %15
  store i32 %12, ptr %15
  br label %return


return:
  ret void

}

define i1 @pd(i32 %x) {
entry:
  %ret.val= alloca i1
  %x.1.3= alloca i32
  store i32 %x, ptr %x.1.3
  br label %for.cond2.0.0

for.cond2.0.0:
  %0 = load i32, ptr @h.0.0
  %1 = load i32, ptr %x.1.3
  %2 = icmp sle i32 %0, %1
  br i1 %2, label %for.body2.0.0, label %for.end2.0.0

for.body2.0.0:
  %3 = load i32, ptr %x.1.3
  %4 = load i32, ptr @h.0.0
  %5 = load i32, ptr @h.0.0
  %6 = add i32 %5, 1
  %7 = mul i32 %4, %6
  %8 = sdiv i32 %7, 2
  %9 = icmp eq i32 %3, %8
  br i1 %9, label %if.then4.0.1, label %if.else4.0.1

if.then4.0.1:
  store i1 true, ptr %ret.val
  br label %return

if.else4.0.1:
  br label %if.end4.0.1

if.end4.0.1:
  br label %for.inc2.0.0

for.inc2.0.0:
  %10 = load i32, ptr @h.0.0
  %11 = add i32 %10, 1
  store i32 %11, ptr @h.0.0
  br label %for.cond2.0.0

for.end2.0.0:
  store i1 false, ptr %ret.val
  br label %return


return:
  %12 = load i1, ptr %ret.val
  ret i1 %12

}

define void @show() {
entry:
  %i.1.4= alloca i32
  %0 = load i32, ptr %i.1.4
  store i32 0, ptr %i.1.4
  br label %for.cond2.0.1

for.cond2.0.1:
  %1 = load i32, ptr %i.1.4
  %2 = load i32, ptr @now.0.0
  %3 = icmp slt i32 %1, %2
  br i1 %3, label %for.body2.0.1, label %for.end2.0.1

for.body2.0.1:
  %4 = load ptr, ptr @a.0.0
  %5 = load i32, ptr %i.1.4
  %6 = getelementptr i32, ptr %4, i32 %5
  %7 = load i32, ptr %6
  %8 = call ptr @toString(i32 %7)
  %9 = call ptr @_add(ptr %8, ptr @.str.0)
  call void @print(ptr %9)
  br label %for.inc2.0.1

for.inc2.0.1:
  %10 = load i32, ptr %i.1.4
  %11 = add i32 %10, 1
  store i32 %11, ptr %i.1.4
  br label %for.cond2.0.1

for.end2.0.1:
  call void @println(ptr @.str.1)
  br label %return


return:
  ret void

}

define i1 @win() {
entry:
  %ret.val= alloca i1
  %i.1.5= alloca i32
  %j.1.5= alloca i32
  %b.1.5= alloca ptr
  %0 = call ptr @_arr_init(i32 100)
  store ptr %0, ptr %b.1.5
  %temp.1.5= alloca i32
  %1 = load i32, ptr @now.0.0
  %2 = load i32, ptr @h.0.0
  %3 = icmp ne i32 %1, %2
  br i1 %3, label %if.then2.0.2, label %if.else2.0.2

if.then2.0.2:
  store i1 false, ptr %ret.val
  br label %return

if.else2.0.2:
  br label %if.end2.0.2

if.end2.0.2:
  %4 = load i32, ptr %j.1.5
  store i32 0, ptr %j.1.5
  br label %for.cond2.3.2

for.cond2.3.2:
  %5 = load i32, ptr %j.1.5
  %6 = load i32, ptr @now.0.0
  %7 = icmp slt i32 %5, %6
  br i1 %7, label %for.body2.3.2, label %for.end2.3.2

for.body2.3.2:
  %8 = load ptr, ptr @a.0.0
  %9 = load i32, ptr %j.1.5
  %10 = getelementptr i32, ptr %8, i32 %9
  %11 = load i32, ptr %10
  %12 = load ptr, ptr %b.1.5
  %13 = load i32, ptr %j.1.5
  %14 = getelementptr i32, ptr %12, i32 %13
  %15 = load i32, ptr %14
  store i32 %11, ptr %14
  br label %for.inc2.3.2

for.inc2.3.2:
  %16 = load i32, ptr %j.1.5
  %17 = add i32 %16, 1
  store i32 %17, ptr %j.1.5
  br label %for.cond2.3.2

for.end2.3.2:
  %18 = load i32, ptr %i.1.5
  store i32 0, ptr %i.1.5
  br label %for.cond2.4.3

for.cond2.4.3:
  %19 = load i32, ptr %i.1.5
  %20 = load i32, ptr @now.0.0
  %21 = sub i32 %20, 1
  %22 = icmp slt i32 %19, %21
  br i1 %22, label %for.body2.4.3, label %for.end2.4.3

for.body2.4.3:
  %23 = load i32, ptr %i.1.5
  %24 = add i32 %23, 1
  %25 = load i32, ptr %j.1.5
  store i32 %24, ptr %j.1.5
  br label %for.cond4.0.4

for.cond4.0.4:
  %26 = load i32, ptr %j.1.5
  %27 = load i32, ptr @now.0.0
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %for.body4.0.4, label %for.end4.0.4

for.body4.0.4:
  %29 = load ptr, ptr %b.1.5
  %30 = load i32, ptr %i.1.5
  %31 = getelementptr i32, ptr %29, i32 %30
  %32 = load i32, ptr %31
  %33 = load ptr, ptr %b.1.5
  %34 = load i32, ptr %j.1.5
  %35 = getelementptr i32, ptr %33, i32 %34
  %36 = load i32, ptr %35
  %37 = icmp sgt i32 %32, %36
  br i1 %37, label %if.then6.0.3, label %if.else6.0.3

if.then6.0.3:
  %38 = load ptr, ptr %b.1.5
  %39 = load i32, ptr %i.1.5
  %40 = getelementptr i32, ptr %38, i32 %39
  %41 = load i32, ptr %40
  %42 = load i32, ptr %temp.1.5
  store i32 %41, ptr %temp.1.5
  %43 = load ptr, ptr %b.1.5
  %44 = load i32, ptr %j.1.5
  %45 = getelementptr i32, ptr %43, i32 %44
  %46 = load i32, ptr %45
  %47 = load ptr, ptr %b.1.5
  %48 = load i32, ptr %i.1.5
  %49 = getelementptr i32, ptr %47, i32 %48
  %50 = load i32, ptr %49
  store i32 %46, ptr %49
  %51 = load i32, ptr %temp.1.5
  %52 = load ptr, ptr %b.1.5
  %53 = load i32, ptr %j.1.5
  %54 = getelementptr i32, ptr %52, i32 %53
  %55 = load i32, ptr %54
  store i32 %51, ptr %54
  br label %if.end6.0.3

if.else6.0.3:
  br label %if.end6.0.3

if.end6.0.3:
  br label %for.inc4.0.4

for.inc4.0.4:
  %56 = load i32, ptr %j.1.5
  %57 = add i32 %56, 1
  store i32 %57, ptr %j.1.5
  br label %for.cond4.0.4

for.end4.0.4:
  br label %for.inc2.4.3

for.inc2.4.3:
  %58 = load i32, ptr %i.1.5
  %59 = add i32 %58, 1
  store i32 %59, ptr %i.1.5
  br label %for.cond2.4.3

for.end2.4.3:
  %60 = load i32, ptr %i.1.5
  store i32 0, ptr %i.1.5
  br label %for.cond2.5.5

for.cond2.5.5:
  %61 = load i32, ptr %i.1.5
  %62 = load i32, ptr @now.0.0
  %63 = icmp slt i32 %61, %62
  br i1 %63, label %for.body2.5.5, label %for.end2.5.5

for.body2.5.5:
  %64 = load ptr, ptr %b.1.5
  %65 = load i32, ptr %i.1.5
  %66 = getelementptr i32, ptr %64, i32 %65
  %67 = load i32, ptr %66
  %68 = load i32, ptr %i.1.5
  %69 = add i32 %68, 1
  %70 = icmp ne i32 %67, %69
  br i1 %70, label %if.then4.0.4, label %if.else4.0.4

if.then4.0.4:
  store i1 false, ptr %ret.val
  br label %return

if.else4.0.4:
  br label %if.end4.0.4

if.end4.0.4:
  br label %for.inc2.5.5

for.inc2.5.5:
  %71 = load i32, ptr %i.1.5
  %72 = add i32 %71, 1
  store i32 %72, ptr %i.1.5
  br label %for.cond2.5.5

for.end2.5.5:
  store i1 true, ptr %ret.val
  br label %return


return:
  %73 = load i1, ptr %ret.val
  ret i1 %73

}

define void @merge() {
entry:
  %i.1.6= alloca i32
  %0 = load i32, ptr %i.1.6
  store i32 0, ptr %i.1.6
  %j.5.0= alloca i32
  br label %for.cond2.0.6

for.cond2.0.6:
  %1 = load i32, ptr %i.1.6
  %2 = load i32, ptr @now.0.0
  %3 = icmp slt i32 %1, %2
  br i1 %3, label %for.body2.0.6, label %for.end2.0.6

for.body2.0.6:
  %4 = load ptr, ptr @a.0.0
  %5 = load i32, ptr %i.1.6
  %6 = getelementptr i32, ptr %4, i32 %5
  %7 = load i32, ptr %6
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %if.then4.0.5, label %if.else4.0.5

if.then4.0.5:
  %9 = load i32, ptr %i.1.6
  %10 = add i32 %9, 1
  %11 = load i32, ptr %j.5.0
  store i32 %10, ptr %j.5.0
  br label %for.cond6.0.7

for.cond6.0.7:
  %12 = load i32, ptr %j.5.0
  %13 = load i32, ptr @now.0.0
  %14 = icmp slt i32 %12, %13
  br i1 %14, label %for.body6.0.7, label %for.end6.0.7

for.body6.0.7:
  %15 = load ptr, ptr @a.0.0
  %16 = load i32, ptr %j.5.0
  %17 = getelementptr i32, ptr %15, i32 %16
  %18 = load i32, ptr %17
  %19 = icmp ne i32 %18, 0
  br i1 %19, label %if.then8.0.6, label %if.else8.0.6

if.then8.0.6:
  %20 = load i32, ptr %i.1.6
  %21 = load i32, ptr %j.5.0
  call void @swap(i32 %20, i32 %21)
  br label %null

if.else8.0.6:
  br label %if.end8.0.6

if.end8.0.6:
  br label %for.inc6.0.7

for.inc6.0.7:
  %22 = load i32, ptr %j.5.0
  %23 = add i32 %22, 1
  store i32 %23, ptr %j.5.0
  br label %for.cond6.0.7

for.end6.0.7:
  br label %if.end4.0.5

if.else4.0.5:
  br label %if.end4.0.5

if.end4.0.5:
  br label %for.inc2.0.6

for.inc2.0.6:
  %24 = load i32, ptr %i.1.6
  %25 = add i32 %24, 1
  store i32 %25, ptr %i.1.6
  br label %for.cond2.0.6

for.end2.0.6:
  %26 = load i32, ptr %i.1.6
  store i32 0, ptr %i.1.6
  br label %for.cond2.1.8

for.cond2.1.8:
  %27 = load i32, ptr %i.1.6
  %28 = load i32, ptr @now.0.0
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %for.body2.1.8, label %for.end2.1.8

for.body2.1.8:
  %30 = load ptr, ptr @a.0.0
  %31 = load i32, ptr %i.1.6
  %32 = getelementptr i32, ptr %30, i32 %31
  %33 = load i32, ptr %32
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %if.then4.0.7, label %if.else4.0.7

if.then4.0.7:
  %35 = load i32, ptr %i.1.6
  %36 = load i32, ptr @now.0.0
  store i32 %35, ptr @now.0.0
  br label %null

if.else4.0.7:
  br label %if.end4.0.7

if.end4.0.7:
  br label %for.inc2.1.8

for.inc2.1.8:
  %37 = load i32, ptr %i.1.6
  %38 = add i32 %37, 1
  store i32 %38, ptr %i.1.6
  br label %for.cond2.1.8

for.end2.1.8:
  br label %return


return:
  ret void

}

define void @move() {
entry:
  %i.1.7= alloca i32
  store i32 0, ptr %i.1.7
  br label %for.cond2.0.9

for.cond2.0.9:
  %0 = load i32, ptr %i.1.7
  %1 = load i32, ptr @now.0.0
  %2 = icmp slt i32 %0, %1
  br i1 %2, label %for.body2.0.9, label %for.end2.0.9

for.body2.0.9:
  %3 = load ptr, ptr @a.0.0
  %4 = load i32, ptr %i.1.7
  %5 = getelementptr i32, ptr %3, i32 %4
  %6 = load i32, ptr %5
  %7 = sub i32 %6, 1
  store i32 %7, ptr %5
  %8 = load i32, ptr %i.1.7
  %9 = add i32 %8, 1
  %10 = load i32, ptr %i.1.7
  store i32 %9, ptr %i.1.7
  br label %for.inc2.0.9

for.inc2.0.9:
  br label %for.cond2.0.9

for.end2.0.9:
  %11 = load i32, ptr @now.0.0
  %12 = load ptr, ptr @a.0.0
  %13 = load i32, ptr @now.0.0
  %14 = getelementptr i32, ptr %12, i32 %13
  %15 = load i32, ptr %14
  store i32 %11, ptr %14
  %16 = load i32, ptr @now.0.0
  %17 = add i32 %16, 0
  %18 = add i32 %16, 1
  store i32 %18, ptr @now.0.0
  br label %return


return:
  ret void

}

define void @__init__() {
entry:
  store i32 48271, ptr @A.0.0
  store i32 2147483647, ptr @M.0.0
  store i32 1, ptr @seed.0.0
  br label %return


return:
  ret void

}

define i32 @main() {
entry:
  call void @__init__()
  %ret.val= alloca i32
  %i.1.8= alloca i32
  store i32 0, ptr %i.1.8
  %temp.1.8= alloca i32
  store i32 0, ptr %temp.1.8
  %count.1.8= alloca i32
  store i32 0, ptr %count.1.8
  %0 = mul i32 3, 7
  %1 = mul i32 %0, 10
  %2 = load i32, ptr @n.0.0
  store i32 %1, ptr @n.0.0
  %3 = load i32, ptr @h.0.0
  store i32 0, ptr @h.0.0
  %4 = call ptr @_arr_init(i32 100)
  %5 = load ptr, ptr @a.0.0
  store ptr %4, ptr @a.0.0
  %6 = load i32, ptr @M.0.0
  %7 = load i32, ptr @A.0.0
  %8 = sdiv i32 %6, %7
  %9 = load i32, ptr @Q.0.0
  store i32 %8, ptr @Q.0.0
  %10 = load i32, ptr @M.0.0
  %11 = load i32, ptr @A.0.0
  %12 = srem i32 %10, %11
  %13 = load i32, ptr @R.0.0
  store i32 %12, ptr @R.0.0
  %14 = load i32, ptr @n.0.0
  %15 = call i1 @pd(i32 %14)
  %16 = xor i1 1, %15
  br i1 %16, label %if.then2.0.8, label %if.else2.0.8

if.then2.0.8:
  call void @println(ptr @.str.2)
  store i32 1, ptr %ret.val
  br label %return

if.else2.0.8:
  br label %if.end2.0.8

if.end2.0.8:
  call void @println(ptr @.str.3)
  call void @initialize(i32 3654898)
  %17 = call i32 @random()
  %18 = srem i32 %17, 10
  %19 = add i32 %18, 1
  %20 = load i32, ptr @now.0.0
  store i32 %19, ptr @now.0.0
  %21 = load i32, ptr @now.0.0
  %22 = call ptr @toString(i32 %21)
  call void @println(ptr %22)
  br label %for.cond2.3.10

for.cond2.3.10:
  %23 = load i32, ptr %i.1.8
  %24 = load i32, ptr @now.0.0
  %25 = sub i32 %24, 1
  %26 = icmp slt i32 %23, %25
  br i1 %26, label %for.body2.3.10, label %for.end2.3.10

for.body2.3.10:
  %27 = call i32 @random()
  %28 = srem i32 %27, 10
  %29 = add i32 %28, 1
  %30 = load ptr, ptr @a.0.0
  %31 = load i32, ptr %i.1.8
  %32 = getelementptr i32, ptr %30, i32 %31
  %33 = load i32, ptr %32
  store i32 %29, ptr %32
  br label %while.cond4.0.11

while.cond4.0.11:
  %34 = load ptr, ptr @a.0.0
  %35 = load i32, ptr %i.1.8
  %36 = getelementptr i32, ptr %34, i32 %35
  %37 = load i32, ptr %36
  %38 = load i32, ptr %temp.1.8
  %39 = add i32 %37, %38
  %40 = load i32, ptr @n.0.0
  %41 = icmp sgt i32 %39, %40
  br i1 %41, label %while.body4.0.11, label %while.end4.0.11

while.body4.0.11:
  %42 = call i32 @random()
  %43 = srem i32 %42, 10
  %44 = add i32 %43, 1
  %45 = load ptr, ptr @a.0.0
  %46 = load i32, ptr %i.1.8
  %47 = getelementptr i32, ptr %45, i32 %46
  %48 = load i32, ptr %47
  store i32 %44, ptr %47
  br label %while.cond4.0.11

while.end4.0.11:
  %49 = load i32, ptr %temp.1.8
  %50 = load ptr, ptr @a.0.0
  %51 = load i32, ptr %i.1.8
  %52 = getelementptr i32, ptr %50, i32 %51
  %53 = load i32, ptr %52
  %54 = add i32 %49, %53
  %55 = load i32, ptr %temp.1.8
  store i32 %54, ptr %temp.1.8
  br label %for.inc2.3.10

for.inc2.3.10:
  %56 = load i32, ptr %i.1.8
  %57 = add i32 %56, 1
  store i32 %57, ptr %i.1.8
  br label %for.cond2.3.10

for.end2.3.10:
  %58 = load i32, ptr @n.0.0
  %59 = load i32, ptr %temp.1.8
  %60 = sub i32 %58, %59
  %61 = load ptr, ptr @a.0.0
  %62 = load i32, ptr @now.0.0
  %63 = sub i32 %62, 1
  %64 = getelementptr i32, ptr %61, i32 %63
  %65 = load i32, ptr %64
  store i32 %60, ptr %64
  call void @show()
  call void @merge()
  br label %while.cond2.4.12

while.cond2.4.12:
  %66 = call i1 @win()
  %67 = xor i1 1, %66
  br i1 %67, label %while.body2.4.12, label %while.end2.4.12

while.body2.4.12:
  %68 = load i32, ptr %count.1.8
  %69 = add i32 %68, 1
  store i32 %69, ptr %count.1.8
  %70 = call ptr @toString(i32 %69)
  %71 = call ptr @_add(ptr @.str.4, ptr %70)
  %72 = call ptr @_add(ptr %71, ptr @.str.5)
  call void @println(ptr %72)
  call void @move()
  call void @merge()
  call void @show()
  br label %while.cond2.4.12

while.end2.4.12:
  %73 = load i32, ptr %count.1.8
  %74 = call ptr @toString(i32 %73)
  %75 = call ptr @_add(ptr @.str.6, ptr %74)
  %76 = call ptr @_add(ptr %75, ptr @.str.7)
  call void @println(ptr %76)
  store i32 0, ptr %ret.val
  br label %return


return:
  %77 = load i32, ptr %ret.val
  ret i32 %77

}


